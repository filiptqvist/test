__author__ = 'max'
import re

class OpenTokenize(object):

    def OpenText(self):
        print("hej")
#        for element in files:
#            with open(element,'r') as fin:
#                #filename = fin.name
#                #filename = filename.rsplit('/')[-1]
#                self.text = fin.read()



    def clean_text(self):
        self.cleaned = re.sub(r'{.+}{.+}|\|',' ',text)
        self.cleaned = re.sub(r'"','', self.cleaned)
        #self.removed = re.sub(r'\|','',self.removed)

    def make_lower(self):
        self.lowered_text=[y.lower() for y in self.cleaned]

    def convert_list_to_str(self):
        self.string = ''.join(self.lowered_text)

    def tokenize(self):
        self.tokenized = re.findall(r'\b[a-z]+\.[a-z]+\.[a-z]+|(?:\d+\.\d+)|(?:\d+\,\d+)|(?:\d+\:\d+)|[a-z]+\'[a-z]+|[a-z]+\'|\'[a-z]+|\w+(?:-\w+)*|\S\b',
                                    self.string) #Tokenize

    def find_trigrams(self):

        self.make_trigrams = list(zip(self.tokenized, self.tokenized[1:], self.tokenized[2:]))
        print(self.make_trigrams)

    def counter(self):
        self.counted_trigrams=[[x,self.make_trigrams.count(x)] for x in set(self.make_trigrams)]


class Node(object):

    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList():
    def __init__(self):
        self.head = None
        self.tail = None

    def AddNode(self,data):
        new_node = Node(data)

        if self.head == None:
            self.head = new_node
        if self.tail != None:
            self.tail.next = new_node
        self.tail = new_node

    def RemoveNode(self, index):
        prev = Node
        node = self.head
        i = 0

        while (node != None) and (i < index):
            prev = node
            node = node.next
            i += 1
        if prev == None:
            self.head = node.next
        else:
            prev.next = node.next


    def PrintList(self):
        node = self.head
        while node != None:
            print(node.data)
            node = node.next





files = ([r'/home/max/Hämtningar/pulp_fiction.sub',
          r'/home/max/Hämtningar/waka.txt'])




for element in files:
        with open(element,'r') as fin:
                #filename = fin.name
                #filename = filename.rsplit('/')[-1]
            text = fin.read()
        read = OpenTokenize()
        read.clean_text()
        read.make_lower()
        read.convert_list_to_str()
        read.tokenize()
        read.find_trigrams()
        read.counter()
        linked_list = LinkedList()
        for trigram in read.counted_trigrams: # Loops all trigrams into the linked list
            linked_list.AddNode(trigram)
        linked_list.PrintList()

