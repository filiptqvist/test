import re
class OpenTokenize(object):

    def OpenText(self):
        apa = 2

    def clean_text(self):
        self.cleaned = re.sub(r'{.+}{.+}|\|',' ',text)
        self.cleaned = re.sub(r'"','', self.cleaned)
        #self.removed = re.sub(r'\|','',self.removed)

    def make_lower(self):
        self.lowered_text=[y.lower() for y in self.cleaned]

    def convert_list_to_str(self):
        self.string = ''.join(self.lowered_text)

    def tokenize(self):
        self.tokenized = re.findall(r'\b[a-z]+\.[a-z]+\.[a-z]+|[a-z]+\.[a-z]+\.|\d+\.\d+|\d+\,\d+|\d+\:\d+|\d+\/\d+|\.{2,}|[a-z]+\'[a-z]+|[$â‚¬]\d+|[a-z]+\'|\'[a-z]+|\w+(?:-\w+)*|\S\b',
                                    self.string) #Tokenize
#Ph.D.

    def find_trigrams(self):

        self.make_trigrams = list(zip(self.tokenized, self.tokenized[1:], self.tokenized[2:]))


    def counter(self):
        self.counted_trigrams=[[self.make_trigrams.count(x),x] for x in set(self.make_trigrams)]


    def selection_sort(self):


        # Loop through the entire array
        for cur_pos in range(len(self.counted_trigrams)):
            # Find the position that has the smallest number
            # Start with the current position
            min_pos = cur_pos

            # Scan left to right (end of the list)
            for scan_pos in range(cur_pos + 1, len(self.counted_trigrams)):


                if self.counted_trigrams[scan_pos] > self.counted_trigrams[min_pos]:

                # It is, mark this position as the smallest
                    min_pos = scan_pos

        # Swap the two values
            temp = self.counted_trigrams[min_pos]
            self.counted_trigrams[min_pos] = self.counted_trigrams[cur_pos]
            self.counted_trigrams[cur_pos] = temp


#insertion sort goes to the left.
    def insertion_sort(self):
        for index in range(1,len(self.counted_trigrams)):

            currentvalue = self.counted_trigrams[index]
            position = index

            while position>0 and self.counted_trigrams[position-1]>currentvalue:
                self.counted_trigrams[position]=self.counted_trigrams[position-1]
                position = position-1

                self.counted_trigrams[position]=currentvalue

class Node(object):

    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList():
    def __init__(self):
        self.head = None
        self.tail = None

    def AddNode(self,data):
        new_node = Node(data)

        if self.head == None:
            self.head = new_node
        if self.tail != None:
            self.tail.next = new_node
        self.tail = new_node

    def RemoveNode(self, index):
        prev = Node
        node = self.head
        i = 0

        while (node != None) and (i < index):
            prev = node
            node = node.next
            i += 1
        if prev == None:
            self.head = node.next
        else:
            prev.next = node.next


    def PrintList(self):
        node = self.head
        while node != None:
            print(filename+':',node.data)
            node = node.next






files = (['/home/stp14/filtorn/programmering_2/projekt/top_gun.sub','/home/stp14/filtorn/programmering_2/projekt/pulp_fiction.sub'])




for element in files:
        with open(element,'r') as fin:
            filename = fin.name
            filename = filename.rsplit('/')[-1]
            text = fin.read()
        linked_list = LinkedList()
        read = OpenTokenize()
        read.clean_text()
        read.make_lower()
        read.convert_list_to_str()
        read.tokenize()
        read.find_trigrams()
        read.counter()
        #read.insertion_sort() #Sorts from lower to higher
        read.selection_sort() #Sorts from higher to lower
        for trigram in read.counted_trigrams: # Loops all trigrams into the linked list
            linked_list.AddNode(trigram)
        
        linked_list.PrintList()

        


#
