import re

file= open (r'/home/stp14/filtorn/programmering_2/projekt/shawnm_mahin/poe.txt','r') 
text = file.read() #>> here will Saving fin.read() to a
find_ly=(re.findall(r'\b(\w+ly)\b',text))
adjectives = [element.upper() for element in find_ly]
adjectives.sort()

class Node:
    def __init__(self,initdata):
        self.data = initdata
        self.next = None

    def getData(self):
        return self.data

    def getNext(self):
        return self.next

    def setData(self,newdata):
        self.data = newdata

    def setNext(self,newnext):
        self.next = newnext

class linkedList:
    def __init__(self):
        self.head = None

    def add(self,item):
        temp = Node(item)
        temp.setNext(self.head)
        self.head = temp
    def Print(self, node):#Print method
        while node:
            print('Total:',node.data)#gets the data from our nodes
            node = node.next#Then goes to the next node. This way we are priting the entire list.
    def search(self, item):#To use this search instanced variable name like this, x.search([28, ('is', 'better', 'than')]) It needs to be the whole item.
        current = self.head#starts to check at the beggining of list.
        found = False#Default False.
        while current != None and not found:#Boleean expression regulates that our loop will actually try  to look for our item
            if current.getData() == item:
                found = True#If item is in our list it gets true
                print(found)
            else:
                current = current.getNext()#Checks next item

        return found#returns found, if found is true then it is true that the item is in our list, than
mylist = linkedList()

for t in adjectives:
    mylist.add(t)


   
file= open (r'/home/stp14/filtorn/programmering_2/projekt/shawnm_mahin/lexikon.txt','r')
adjectives_comparewith = file.read()

adjectives_comparewith = re.findall(r'[A-Z][a-z]*.+ly, a\.[\S|.]*.*', adjectives_comparewith)#find -ly ending adjectives in the dictionary a\.'

for adj in adjectives:
    aa = adj.lower()#change the found words from uppercase to lowercase to match the words found in our text with the dictionary words
    #print(aa)
    for let in adjectives_comparewith:
        ss = re.sub(r'[\W_]+', '', let)#strip the dictionary words from symbols
        ss = ss[:-1] 
        if aa in ss:
            print(aa)#print the common words found in the text and in the dictionary, but it just finds 2 instead of 3!

def insertionSort(h):
    if h == None:
        return None
    #Make the first node the start of the sorted list.
    sortedList= h
    h=h.next
    sortedList.next= None
    while h != None:
        curr= h
        h=h.next
        if curr.data<sortedList.data:
            #Advance the nodes
            curr.next= sortedList
            sortedList= curr
        else: 
            #Search list for correct position of current.
            search= sortedList
            while search.next!= None and curr.data > search.next.data:
                search= search.next
            #current goes after search.
            curr.next= search.next
            search.next= curr
    return sortedList

linked_list= linkedList()
linked_list.Print(linked_list.head)
linked_list.search('HOLY')
